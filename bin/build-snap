#!/bin/sh

set -e

# Make sure the script is called from the right place
#
if test ! -d snapcpp
then
	echo "error: This script must be run from the directly right outside of the snapcpp source code."
	echo "error: i.e. the command line generally looks like: snapcpp/bin/build-snap"
	echo "error: It also assumes that you did a clone in a directory named \"snapcpp\"."
	exit 1;
fi

# You may change the compiler with something like this:
# (The CMAKE_C_COMPILER and CMAKE_CXX_COMPILER will NOT work)
#
#export CC=gcc-4.9
#export CXX=g++-4.9 cmake


# Whether make is invoked at the end of the cmake process (--no-build)
#
DO_BUILD=true


# By default use one processor for your build, you can increase that
# number here or use the --processors command line option
#
# We could also use `nproc`, but memory is important too, not just the
# number of processors.
#
PROCESSORS=1


# By default I turn OFF the sanitize option for Debug
# (it's always OFF for release, you have to edit the cmake Module
# SnapCMakeModulesConfig.cmake to get -fsanitize=... options added
# to a release build.)
#
# Use the --sanitize command line option of this script to turn it
# ON. The reason for having it off by default is that it creates
# binaries that allocate 20Tb of virtual memory. It may not look
# like a big deal, but it quickly eats your RAM if you don't have
# much of it.
#
SANITIZE_OPTIONS=OFF


# Default come from cmake setups--these may not be up to date but it should
#                                 give you an idea about possible values
#
#DEBUILD_EMAIL="Build Server <build@m2osw.com>"
#DEBUILD_PLATFORM=xenial

# Source the user defined .build-snap.rc file
# In most cases this is used to define the DEBUILD_EMAIL to your own
# email address so you can sign all the packages properly.
#
if test -f ~/.build-snap.rc
then
	# Let you have a form of `rc` file (like .netrc) for the
	# build-snap script
	#
	# You can redefine one or more of the variables defined above
	# this if/fi block
	#
	. ~/.build-snap.rc
fi


# Check the command line options if any
#
while test -n "$1"
do
	case "$1" in
	-h|--help)
		echo
		echo "Usage: $0 [--opts]"
		echo
		echo "where --opts can be one of:"
		echo "   --email \"name <name@example.com>\"    define the debuild email"
		echo "   --help | -h                            print out this screen"
		echo "   --build | --no-build                   whether to run make after the cmake commands"
		echo "   --processors <count>                   processors used to compile"
		echo "   --sanitize ON|OFF                      define whether to use sanitize compiler options"
		echo
		exit 1;
		;;
	--email)
		shift
		if test -z "$1"
		then
			echo "the --email is expected to be followed by an email address"
			exit 1;
		fi
		DEBUILD_EMAIL="$1"
		shift
		;;
	--build)
		shift
		DO_BUILD=true
		;;
	--no-build)
		shift
		DO_BUILD=false
		;;
	--processors)
		shift
		if test -z "$1"
		then
			echo "the --processors is expected to be followed by a number"
			exit 1;
		fi
		PROCESSORS="$1"
		shift
		;;
	--sanitize)
		shift
		if test -z "$1"
		then
			echo "the --sanitize is expecteed to be followed by ON or OFF"
			exit 1;
		fi
		SANITIZE_OPTIONS="$1"
		shift
		;;
	*)
		echo "error: unknown command line option \"$1\""
		exit 1;
		;;
	esac
done

if test -n "$DEBUILD_EMAIL"
then
	DEBUILD_EMAIL_VAR="-DDEBUILD_EMAIL=$DEBUILD_EMAIL"
else
	DEBUILD_EMAIL_VAR=""
fi

# Full clean up
#
rm -rf BUILD RELEASE /tmp/SnapFindDeps.pl.hash

# Configure and generate the Release version
#
mkdir RELEASE
cd RELEASE
cmake \
	-DCMAKE_BUILD_TYPE=Release \
	-DMAKEFLAGS=-j$PROCESSORS \
	-DBUILD_ONCE=OFF \
	"$DEBUILD_EMAIL_VAR" \
	../snapcpp

# Do not build the release version by default
# Use something like:
#        make -C RELEASE

# Configure and generate the Debug version
#
cd ..
mkdir BUILD
cd BUILD
cmake \
	-DCMAKE_BUILD_TYPE=Debug \
	-DMAKEFLAGS=-j$PROCESSORS \
	-DBUILD_ONCE=OFF \
	-DSANITIZE_OPTIONS=$SANITIZE_OPTIONS \
	"$DEBUILD_EMAIL_VAR" \
	../snapcpp

# Build the Debug version
#
if $DO_BUILD
then
	make
fi
